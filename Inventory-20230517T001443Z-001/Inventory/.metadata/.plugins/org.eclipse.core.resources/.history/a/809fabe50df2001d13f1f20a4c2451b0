package IntentoryActivity;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;
import java.util.Date;
public class PointOfSale extends JFrame {
	
	//Global declaration
			//Frame
			JFrame frame = new JFrame();
			JFrame items = new JFrame();
			//Buttons
			JButton NewTransaction = new JButton();
			JButton RemoveItems = new JButton();
			JButton Discount = new JButton();
			JButton Payment = new JButton();
			JButton Cancel = new JButton();
			
		JLabel dateLabel= new JLabel();
			
		JButton X = new JButton ();
		JButton Minimize = new JButton();
		
		JTextField Quantity = new JTextField();
		JButton Searchbtn = new JButton();
		
		String [] header1 = new String [] {"Item Code","Item Name","Size", "Price","Quantity","Total"
				
				
				
		};
		
		JPanel MainFramePanel = new JPanel(new BorderLayout());
		DefaultTableModel MainTableModel = new DefaultTableModel(null, header1);
		
		//table(JTable) gets he value of DefaultTableModel
		JTable Maintable = new JTable(MainTableModel);
		
		//JScrollPane gets the value of JTable
		JScrollPane ScrollPane = new JScrollPane(Maintable);
				//this will add a function to filter the items in a table
		TableRowSorter<TableModel> sorter = new TableRowSorter<>(Maintable.getModel());
		
		JLabel Counter = new JLabel();
		
		JLabel TotalPayment = new JLabel();
		JLabel PaymentTotal = new JLabel();
		int counter = 00001;
	PointOfSale() {
		//JFrame settings
		
		this.setSize(1500,800);
		this.setUndecorated(true);
		this.setVisible(true);
		this.setTitle("Point Of Sale");
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
		this.setResizable(false);
		
		this.setLayout(null);
		
		ImageIcon image = new ImageIcon("POS.png");
		ImageIcon resized = new ImageIcon(image.getImage().getScaledInstance(this.getWidth(),this.getHeight(),java.awt.Image.SCALE_SMOOTH));
		JLabel BL = new JLabel(resized);
		BL.setSize(this.getWidth(),this.getHeight());
		this.setContentPane(BL);
		
		Border border = BorderFactory.createLineBorder(Color.black);
		Border border1 = BorderFactory.createLineBorder(Color.WHITE);
		String format = String.format("%05d", counter);
		
		
		this.add(Searchbtn);
		
		Searchbtn.setFont(new Font("ARIAL", Font.BOLD,24));
		Searchbtn.setBounds(550,290,200,50);
		Searchbtn.setOpaque(false);
		Searchbtn.setBorder(border);
		Searchbtn.setBackground(Color.black);
		// Add a mouse listener to the button
		Searchbtn.addMouseListener(new MouseAdapter() {
			    @Override
			    public void mouseEntered(MouseEvent e) {
			        // Change the background color when the mouse enters the button
			    	Searchbtn.setBorder(border1);
			    }
			    @Override
			    public void mouseExited(MouseEvent e) {
			        // Change the background color back to the default when the mouse exits the button
			    	Searchbtn.setBorder(border);
			    }
		});
		
		
		this.add(Quantity);
		this.add(X);
		this.add(MainFramePanel);
		this.add(Minimize);
		this.add(Counter);
		this.add(TotalPayment);
		this.add(PaymentTotal);
		
		Counter.setFont(new Font("ARIAL", Font.BOLD,40));
		Counter.setBounds(910,290,200,50);
		Counter.setOpaque(false);
		Counter.setBackground(Color.black);
		Counter.setText(format);
		
		TotalPayment.setFont(new Font("ARIAL", Font.BOLD,30));
		TotalPayment.setBounds(1150,150,250,50);
		TotalPayment.setOpaque(false);
		TotalPayment.setBackground(Color.black);
		TotalPayment.setText("Total Payment:");
		
		PaymentTotal.setFont(new Font("ARIAL", Font.BOLD,30));
		PaymentTotal.setBounds(1150,200,250,50);
		PaymentTotal.setOpaque(false);
		PaymentTotal.setBackground(Color.black);
		PaymentTotal.setText("");
		
		Quantity.setFont(new Font("ARIAL", Font.BOLD,24));
		Quantity.setBounds(75,290,370,50);
		Quantity.setOpaque(false);
		Quantity.setBorder(border);
		Quantity.setBackground(Color.black);
		
		MainFramePanel.setBounds(100, 400, 800, 400);
		MainFramePanel.setBackground(Color.white);
		MainFramePanel.add(ScrollPane);
		MainFramePanel.setBackground(new Color(0xd6d6d6));
		Maintable.getTableHeader().setEnabled(false);
		
		
		
		X.setBounds(1440,0,60,30);
		X.setFont(new Font("Arial", Font.BOLD,18));
		X.setText("X");
		X.setBackground(new Color(0xd6d6d6));
		X.setFocusable(false);
		
		
		X.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				dispose();
				
			}
			
			
		});
		
		Minimize.setBounds(1375,0,60,30);
		Minimize.setFont(new Font("Arial", Font.BOLD,25));
		Minimize.setText("-");
		Minimize.setBackground(new Color(0xd6d6d6));
		Minimize.setFocusable(false);
		
		
		Minimize.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				setState(JFrame.ICONIFIED);
				
			}
			
			
		});
		
		// Create a new JLabel with a default text
		JLabel label = new JLabel("Time: ");
		label.setFont(new Font("SansSerif", Font.PLAIN, 40));
		this.add(label);
		//this.setLayout(new FlowLayout());
		label.setBounds(760,125,400,80);
		// Create a SimpleDateFormat object to format the time
		SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
		label.setPreferredSize(new Dimension(300, 40));
		
		dateLabel.setBounds(50,125,650,80);
		this.add(dateLabel);
		
		
		
		// Create a Timer that fires every second
		Timer timer = new Timer(1000, new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        // Update the label text with the current time
		        label.setText("Time:      " + dateFormat.format(new Date()));
		        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, MMM dd, yyyy");
                Date now = new Date();
                
                dateLabel.setFont(new Font("Arial", Font.BOLD, 40));
                dateLabel.setText("Date:           "+dateFormat.format(now));
		    }
		    
		});
		timer.start();
		
		
		
		
		//Border and backgrounds Settings in button
	
		RemoveItems.setBorder(border);
		RemoveItems.setBackground(Color.black);
		Discount.setBorder(border);
		Discount.setBackground(Color.black);
		Payment.setBorder(border);
		Payment.setBackground(Color.black);
		Cancel.setBorder(border);
		Cancel.setBackground(Color.black);
		//------------------------------------------
		this.add(NewTransaction);
		this.add(RemoveItems);
		this.add(Discount);	
		this.add(Payment);
		this.add(Cancel);
		
		
		
		//Remove Items button settings;
		RemoveItems.setBounds(1110,455,370,50);
		RemoveItems.setOpaque(false);
		
		
		// Add a mouse listener to the button
					RemoveItems.addMouseListener(new MouseAdapter() {
				    @Override
				    public void mouseEntered(MouseEvent e) {
				        // Change the background color when the mouse enters the button
				    	RemoveItems.setBorder(border1);
				    }
				    @Override
				    public void mouseExited(MouseEvent e) {
				        // Change the background color back to the default when the mouse exits the button
				    	RemoveItems.setBorder(border);
				    }
			});
					
		Discount.setBounds(1110,535,370,50);
		Discount.setOpaque(false);
				
					
		// Add a mouse listener to the button
		Discount.addMouseListener(new MouseAdapter() {
	    @Override
	    public void mouseEntered(MouseEvent e) {
	        // Change the background color when the mouse enters the button
	    	Discount.setBorder(border1);
	    }
	    @Override
	    public void mouseExited(MouseEvent e) {
	        // Change the background color back to the default when the mouse exits the button
	    	Discount.setBorder(border);
	    }
});
		
		Payment.setBounds(1110,615,370,50);
		Payment.setOpaque(false);
				
					
		// Add a mouse listener to the button
		Payment.addMouseListener(new MouseAdapter() {
	    @Override
	    public void mouseEntered(MouseEvent e) {
	        // Change the background color when the mouse enters the button
	    	Payment.setBorder(border1);
	    }
	    @Override
	    public void mouseExited(MouseEvent e) {
	        // Change the background color back to the default when the mouse exits the button
	    	Payment.setBorder(border);
	    }
});
		Cancel.setBounds(1110,695,370,50);
		Cancel.setOpaque(false);
				
					
		// Add a mouse listener to the button
		Cancel.addMouseListener(new MouseAdapter() {
	    @Override
	    public void mouseEntered(MouseEvent e) {
	        // Change the background color when the mouse enters the button
	    	Cancel.setBorder(border1);
	    }
	    @Override
	    public void mouseExited(MouseEvent e) {
	        // Change the background color back to the default when the mouse exits the button
	    	Cancel.setBorder(border);
	    }
});
		
		//Cancel Button
		
		Cancel.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				 int option = JOptionPane.showConfirmDialog(null, "Do you want to cancel??", "Confirmation", JOptionPane.YES_NO_OPTION);
			        
			        if (option == JOptionPane.YES_OPTION) {
			            // user clicked "Yes"
			           dispose();
			        } else {
			           
			        }
			}
			
			
		});
		
		
		//this will create a new Panel with BorderLayout
		
			JPanel tblPanel = new JPanel(new BorderLayout());
				//this will create an array of JTextField with fixed size of 5
			JTextField [] txt_Fields = new JTextField[8];
			
			
				
			
			String [] header = new String [] {"Item Code","Item Name","Item Description", "Price","Size","Stocks",
					"Re-Order Point","Remarks"
					
			};
			
			
			
			
			DefaultTableModel model = new DefaultTableModel(null, header);
			
			//table(JTable) gets he value of DefaultTableModel
			JTable table = new JTable(model);
			
			//JScrollPane gets the value of JTable
			JScrollPane ScrollPane_Table = new JScrollPane(table);
			//this will add a function to filter the items in a table
			TableRowSorter<TableModel> sort = new TableRowSorter<>(table.getModel());
			

			JPanel panelProducts = new JPanel(new BorderLayout());
			JLabel search = new JLabel();
			JTextField txtSearch = new JTextField();
			//Row Vector 
			Vector <String> r = new Vector<String>();
			//ctr for the ItemCode
			int ctr = 00001;
			JButton AddItembtn = new JButton();
			JButton X = new JButton();
			JButton Minimize = new JButton();
			
		
				
				items.setTitle("Table");
				items.setSize(800, 400);
				items.setLocationRelativeTo(null);
				items.setUndecorated(true);
				this.setResizable(false);
				
				int y = 50;
				//this loop will set the properties of JTextField , JLabel
				for(int i = 0; i <= txt_Fields.length -1 ; i++) {
					//properties of JTextField
					txt_Fields[i] = new JTextField();
					txt_Fields[i].setBounds(180, y, 150, 25);
					this.add(txt_Fields[i]);
					
					
				}
				items.add(txtSearch);
				items.add(search);
				items.add(AddItembtn);
				items.add(X);
				items.add(Minimize);
				
				X.setBounds(750,0,50,25);
				X.setFont(new Font("Times New Roman", Font.PLAIN, 20));
				X.setText("X");
				X.setFocusable(false);
				
				X.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						items.dispose();
					}
					
				}); 
				
				search.setText("Search");
				search.setFont(new Font("ARIAL",Font.BOLD, 20));
				search.setBounds(5,40,200,25);
				txtSearch.setBounds(85,40,550,25);
				AddItembtn.setBounds(675,40,100,25);
				AddItembtn.setText("Add Item");
				
				table.setRowSorter(sort);
				txtSearch.getDocument().addDocumentListener(new DocumentListener()
						    {
						            @Override
						            public void insertUpdate(DocumentEvent e) {
						                String str = txtSearch.getText();
						                if (str.trim().length() == 0) {
						                    sort.setRowFilter(null);
						                } else {
						                    //(?i) means case insensitive search
						                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
						                }
						            }
						            @Override
						            public void removeUpdate(DocumentEvent e) {
						                String str = txtSearch.getText();
						                if (str.trim().length() == 0) {
						                    sort.setRowFilter(null);
						                } else {
						                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
						                }
						            }
						            @Override
						            public void changedUpdate(DocumentEvent e) {}
						        });

				
				
				txt_Fields[7].setBounds(180, 500, 150, 25);
				txt_Fields[7].setText("");
				txt_Fields[7].setEnabled(false);
				
				txt_Fields[0].setEnabled(false);
				txt_Fields[0].setText("00001");
				txt_Fields[0].setVisible(false);
				
				for(int i = 1; i<=txt_Fields.length -1; i++) {
					txt_Fields[i].setEditable(false);
				}
				
				
			
				
				//Defaultl
				String [] cvt = new String [8];
				txt_Fields[1].setText("Pancit Canton");
				txt_Fields[2].setText("Noodles");
				txt_Fields[3].setText("22.35");
				txt_Fields[4].setText("16 grams");
				txt_Fields[5].setText("100");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				String formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 2
				txt_Fields[1].setText("Samyang");
				txt_Fields[2].setText("Noodles");
				txt_Fields[3].setText("20.5");
				txt_Fields[4].setText("25 grams");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 3
				txt_Fields[1].setText("Loaded");
				txt_Fields[2].setText("Junk Food");
				txt_Fields[3].setText("7.53");
				txt_Fields[4].setText("7 grams");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 4
				txt_Fields[1].setText("Potate Fries");
				txt_Fields[2].setText("Junk Food");
				txt_Fields[3].setText("10.0");
				txt_Fields[4].setText("10 grams");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 5
				txt_Fields[1].setText("Moby");
				txt_Fields[2].setText("Junk Food");
				txt_Fields[3].setText("11.64");
				txt_Fields[4].setText("10 grams");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 6
				txt_Fields[1].setText("Hansel");
				txt_Fields[2].setText("Biscuit");
				txt_Fields[3].setText("53.64");
				txt_Fields[4].setText("18 grams");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 7
				txt_Fields[1].setText("Skyflakes");
				txt_Fields[2].setText("Biscuit");
				txt_Fields[3].setText("55.6");
				txt_Fields[4].setText("3.5 oz");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 8
				txt_Fields[1].setText("San Marino");
				txt_Fields[2].setText("Canned Goods");
				txt_Fields[3].setText("75.68");
				txt_Fields[4].setText("3.5 oz");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 9
				txt_Fields[1].setText("Corned Beef");
				txt_Fields[2].setText("Canned Goods");
				txt_Fields[3].setText("78.2");
				txt_Fields[4].setText("3.5 oz");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");

				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText(formatted);

				model.addRow(cvt);
				
				//Row 10
				txt_Fields[1].setText("Reno");
				txt_Fields[2].setText("Canned Goods");
				txt_Fields[3].setText("50.5");
				txt_Fields[4].setText("4.5 oz");
				txt_Fields[5].setText("50");
				txt_Fields[6].setText("10");
				txt_Fields[7].setText("High Stocks");
				for (int i = 0; i <=cvt.length-1;i++) {
					
					cvt[i]=txt_Fields[i].getText().toString();
							
				}
				
				for(int i =1; i<=txt_Fields.length-1; i++) {
					txt_Fields[i].setEditable(false);
					txt_Fields[i].setText("");
					txt_Fields[i].setVisible(false);
				
				}
				ctr++;
				formatted = String.format("%05d", ctr);
				
				txt_Fields[0].setText("");
				
				model.addRow(cvt);
				
				TableColumnModel tmtblProducts = table.getColumnModel();
				tmtblProducts.getColumn(7).setPreferredWidth(130);
				tmtblProducts.getColumn(1).setPreferredWidth(130);
				tmtblProducts.getColumn(4).setPreferredWidth(100);
				DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
				centerRenderer.setHorizontalAlignment(JLabel.CENTER);
				for(int i = 0; i<=txt_Fields.length -1;i++) {
				table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
			}
				tblPanel.setBounds(1, 70, 785, 400);
				tblPanel.setBackground(Color.white);
				tblPanel.add(ScrollPane_Table);
				table.getTableHeader().setEnabled(false);
			
				items.add(tblPanel);
			
				items.setLayout(null);
				items.setVisible(false);
				
				
			
				
			Searchbtn.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					
					if (Quantity.getText().isEmpty()) {
			             JOptionPane.showMessageDialog(null, "Please Enter Quantity!", "Invalid", JOptionPane.WARNING_MESSAGE);
			              return;
			         }
					else {
					//Test if the user input a String into Stocks textfields
					try {
					    double value = Double.parseDouble(Quantity.getText());
					    // If control reaches here, the input is a valid integer
					} catch (NumberFormatException e1) {
						 JOptionPane.showMessageDialog(null, "Please enter a valid integer value.");
			              return;
					}
						
						
					}
				items.setVisible(true);
				
				}
							
				
				
			});
			
			PaymentTotal.setText("₱0.0");
			
			AddItembtn.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					 int rowSelected = table.getSelectedRow();
					 if(rowSelected == -1) {
			                JOptionPane.showMessageDialog(null, "Please select a row to add.");
			                return;
			            }
					
					 
					 int res = JOptionPane.showConfirmDialog(null,"Sure you want to add this item??", "Swing Tester",
				               JOptionPane.YES_NO_OPTION,
				               JOptionPane.QUESTION_MESSAGE);
						/* if user pressed yes it gets 
						 * the text of textfields and process
						 * if its high Stocks and low Stocks
						 */
						if(res == JOptionPane.YES_OPTION){
					int selectedRow = table.getSelectedRow();
				
					
					
					//JTextField newRow[] = new JTextField[5];
					
					String[] row = new String[6];
					JTextField compute = new JTextField();
					items.add(compute);
					
					for(int i = 0; i<=txt_Fields.length-1;i++) {
						model.getValueAt(selectedRow, i);
		
		                    String value = (String) model.getValueAt(selectedRow, i); // get the value of the first column of the selected row
		                    txt_Fields[i].setText(value); // set the value in the text field
		
						}
				
					
					for(int i = 0; i<=txt_Fields.length-1;i++) {
					model.getValueAt(selectedRow, i);
	
	                    String value = (String) model.getValueAt(selectedRow, i); // get the value of the first column of the selected row
	                    txt_Fields[i].setText(value); // set the value in the text field
					}
	                    //Item COde
	                  row[0] = txt_Fields[0].getText();
	                  //Item name
	                  row[1] = txt_Fields[1].getText();
	                  //size
	                  row[2] = txt_Fields[4].getText();
	                  //Price
	                  row[3] = txt_Fields[3].getText();
	                  //quantity
	                  row[4] = Quantity.getText();
	                  
	                  String PriceStr = txt_Fields[3].getText();
	                  String QuantityStr = Quantity.getText();
	                  double x = Double.parseDouble(PriceStr);
	                  double y = Double.parseDouble(QuantityStr);
	                  double sum = x*y;
	                  String f = String.valueOf(sum);
	                  compute.setText(f);
	                  row[5] = compute.getText();

	                  Object current_value = model.getValueAt(selectedRow, 5);
	                  double CValue = 0;
	                  if (current_value instanceof String) {
	                      CValue = Double.parseDouble((String) current_value);
	                  } else if (current_value instanceof Double) {    
	                      CValue = (Double) current_value;
	                  }

	                  double sum1 = CValue - y;
	                  int SumInt = (int) sum1;
	                  if (sum1 < 0) {
	                      JOptionPane.showMessageDialog(null, "Not enough stocks");
	                      model.setValueAt(current_value, selectedRow, 5);
	                  } else {
	                      model.setValueAt(SumInt, selectedRow, 5);
	                  }



					
					MainTableModel.addRow(row);
					table.clearSelection();
					items.dispose();
						}
					// Assume that you have a JTable object named "table" with columns for item name, quantity, unit price, and total price.
					// Assume that you have a JLabel object named "label" that you want to set the retrieved values into.

					double[] columnValues = new double[Maintable.getRowCount()]; // Assuming the column has integer values
				    
					for (int i = 0; i < Maintable.getRowCount(); i++) {
					    columnValues[i] = Double.parseDouble(Maintable.getValueAt(i, 5).toString());
					}

					// To get the sum of the column values
					double sum = Arrays.stream(columnValues).sum();

					PaymentTotal.setText("₱"+(String.format("%.2f", sum)));

					
					
				}
				
			});
	
			RemoveItems.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					 int selectedRow = Maintable.getSelectedRow();
					 if(selectedRow == -1) {
			                JOptionPane.showMessageDialog(null, "Please select a row to delete.");
			                return;
			            } 
					 
					 if(e.getSource().equals(RemoveItems)) {
					int res = JOptionPane.showConfirmDialog(null,"Sure? You want to Delete?", "Swing Tester",
				               JOptionPane.YES_NO_OPTION,
				               JOptionPane.WARNING_MESSAGE);
				            if(res == JOptionPane.YES_OPTION){
				            	MainTableModel.removeRow(Maintable.getSelectedRow());
				            	 // Recalculate the total payment
				                double[] columnValues = new double[Maintable.getRowCount()]; // Assuming the column has double values
				                for (int i = 0; i < Maintable.getRowCount(); i++) {
				                    columnValues[i] = Double.parseDouble(Maintable.getValueAt(i, 5).toString());
				                }

				                // To get the sum of the column values
				                double sum = Arrays.stream(columnValues).sum();

				                PaymentTotal.setText("₱"+Double.toString(sum));
				            
				            }else if (res == JOptionPane.NO_OPTION){
				               
				            }else {
				            	
				            }
	
				            Maintable.clearSelection();
				            
				}
				
				}
			});
			JRadioButton Student = new JRadioButton();
			JRadioButton Senior = new JRadioButton();
			JRadioButton RegularCustomer = new JRadioButton();
			JRadioButton Employee = new JRadioButton();
			ButtonGroup group = new ButtonGroup();
			JLabel dc = new JLabel();
			JButton Ok = new JButton();
			JFrame Dcframe = new JFrame();
			JButton close = new JButton ();
			JButton minim = new JButton();
			//JFrame settings
			Dcframe.setSize(400,250);
			//this.setUndecorated(true);
			Dcframe.setVisible(false);
			Dcframe.setTitle("DISCOUNT");
			Dcframe.setUndecorated(true);
			Dcframe.setLocationRelativeTo(null);
			Dcframe.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
			Dcframe.setResizable(false);
			Dcframe.setLayout(null);
			Dcframe.add(Student);
			Dcframe.add(Senior);
			Dcframe.add(RegularCustomer);
			Dcframe.add(Employee);
			Dcframe.add(dc);
			Dcframe.add(Ok);
			group.add(Student);
			group.add(Senior);
			group.add(RegularCustomer);
			group.add(Employee);
			Dcframe.add(close);
			Dcframe.add(minim);
			
			close.setBounds(355,0,45,30);
			close.setText("X");
			close.setFont(new Font("ARIAL", Font.BOLD, 17));
			close.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					Dcframe.setVisible(false);
				}
				
			});
			dc.setBounds(100,10,200,50);
			dc.setText("SELECT DISCOUNT");
			dc.setFont(new Font("ARIAL", Font.BOLD, 20));
			
			
			//Student
			Student.setBounds(25,60,130,30);
			Student.setText("Student 3%");
			Student.setFont(new Font("ARIAL", Font.BOLD, 15));
			
			//SENIOR
			Senior.setBounds(25,120,150,30);
			Senior.setText("Senior/ PWD 20%");
			Senior.setFont(new Font("ARIAL", Font.BOLD, 15));
			
			//Regular Customer
			RegularCustomer.setBounds(180,60,200,30);
			RegularCustomer.setText("Regular Customer 25%");
			RegularCustomer.setFont(new Font("ARIAL", Font.BOLD, 15));
			
			//Employee Customer
			Employee.setBounds(180,120,200,30);
			Employee.setText("Employee 15%");
			Employee.setFont(new Font("ARIAL", Font.BOLD, 15));
			
			//OK button
			Ok.setBounds(135,160,100,30);
			Ok.setText("OK");
			
			Discount.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
					 int selectedRow = Maintable.getSelectedRow();
					 if(selectedRow == -1) {
			                JOptionPane.showMessageDialog(null, "Please select order first!", "Warning", JOptionPane.WARNING_MESSAGE);
			                return;
			            } 
					
				Dcframe.setVisible(true);
				Ok.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						if(Student.isSelected()) {
							double value = Double.parseDouble(Maintable.getValueAt(selectedRow, 5).toString());
							double discountedValue = (value * .3);
							value = value - discountedValue;
							Maintable.setValueAt(String.format("%.2f", value), selectedRow, 5);
							double[] columnValues = new double[Maintable.getRowCount()]; // Assuming the column has integer values
						    
							for (int i = 0; i < Maintable.getRowCount(); i++) {
							    columnValues[i] = Double.parseDouble(Maintable.getValueAt(i, 5).toString());
							}

							// To get the sum of the column values
							double sum = Arrays.stream(columnValues).sum();

							PaymentTotal.setText("₱"+Double.toString(sum));

							Dcframe.dispose();
							group.clearSelection();
						}
						else if(Senior.isSelected()) {
							double value = Double.parseDouble(Maintable.getValueAt(selectedRow, 5).toString());
							double discountedValue = (value * .20) ;
							value = value - discountedValue;
							Maintable.setValueAt(String.format("%.2f", value), selectedRow, 5);
							double[] columnValues = new double[Maintable.getRowCount()]; // Assuming the column has integer values
						    
							for (int i = 0; i < Maintable.getRowCount(); i++) {
							    columnValues[i] = Double.parseDouble(Maintable.getValueAt(i, 5).toString());
							}

							// To get the sum of the column values
							double sum = Arrays.stream(columnValues).sum();

							PaymentTotal.setText("₱"+Double.toString(sum));

							Dcframe.dispose();
							group.clearSelection();
						}
						else if(RegularCustomer.isSelected()) {
							double value = Double.parseDouble(Maintable.getValueAt(selectedRow, 5).toString());
							double discountedValue = (value * .25) ;
							value = value - discountedValue;
							Maintable.setValueAt(String.format("%.2f", value), selectedRow, 5);
							double[] columnValues = new double[Maintable.getRowCount()]; // Assuming the column has integer values
						    
							for (int i = 0; i < Maintable.getRowCount(); i++) {
							    columnValues[i] = Double.parseDouble(Maintable.getValueAt(i, 5).toString());
							}

							// To get the sum of the column values
							double sum = Arrays.stream(columnValues).sum();

							PaymentTotal.setText("₱"+Double.toString(sum));

							Dcframe.dispose();
							group.clearSelection();
						}
						else if(Employee.isSelected()) {
							double value = Double.parseDouble(Maintable.getValueAt(selectedRow, 5).toString());
							double discountedValue = (value * .15) ;
							value = value - discountedValue;
							Maintable.setValueAt(String.format("%.2f", value), selectedRow, 5);
							double[] columnValues = new double[Maintable.getRowCount()]; // Assuming the column has integer values
						    
							for (int i = 0; i < Maintable.getRowCount(); i++) {
							    columnValues[i] = Double.parseDouble(Maintable.getValueAt(i, 5).toString());
							}

							// To get the sum of the column values
							double sum = Arrays.stream(columnValues).sum();

							PaymentTotal.setText("₱"+Double.toString(sum));

							Dcframe.dispose();
							group.clearSelection();
						}
						else {
							
						}
					}
					
				});
				}
				
			});
		
			
		
	}}


